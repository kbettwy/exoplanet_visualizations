# -*- coding: utf-8 -*-
"""Total_List of Exoplanet Data Visualization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZX6boLaYYw5bHC_rZqE8vYAZ8YCGTNZ7
"""

# Libraries for data manipulation
import pandas as pd
import numpy as np

# Libraries for data visualization
import matplotlib.pyplot as plt
import seaborn as sns

# Load the Data
exoplanets = pd.read_csv("/content/drive/MyDrive/Exoplanets/(Everything)PSCompPars_2022.04.03_12.52.04.csv", sep=',', skiprows=1)

from google.colab import drive
drive.mount('/content/drive')

exoplanets

exoplanets.info()

"""## How does the transit discovery method compare to other discovery methods in terms of the number of exoplanets discovered? 

"""

# List of discovery types
x = np.array(exoplanets["discoverymethod"])
discovery_types = np.unique(x)

#Tells how many discovery types there are
discovery_types

ax1 = sns.countplot(y='discoverymethod', data=exoplanets)
ax1.set(xlabel='Number of Planets Discovered', ylabel='Discovery Method', title='Discovery Method')
plt.show()

"""We can clearly see that transit is the most common method of discovery, although in more recent years scientists have made advancements in the other discovery methods. The other methods are not at zero, but the scale of the graph makes it seem like there is no bar at all.

Here is a link to [a dynamic discovery method by year graph](https://app.flourish.studio/visualisation/8761129/edit )  

Radial velocity was popular in the 1990s, and the transit method was introduced around 2005 and became the most predominant method.

## How does the transit discovery method compare to other discovery methods in terms of the orbit period?
"""

ax2 = sns.barplot(y='discoverymethod', x='pl_orbper', data=exoplanets)
ax2.set(xlabel='Orbital Period', ylabel='', title='Discovery Method and Orbital Period (days)')
plt.show()

"""In this graph, the imaging method is skewing the data, making it difficult to see the orbital periods in the other discovery methods. We will remove imaging from the following graph."""

#df2
df2 = exoplanets[exoplanets.discoverymethod != "Imaging"]

print(df2)

x = np.array(df2["discoverymethod"])
discovery_types = np.unique(x)

print(discovery_types)

"""We are verifying that the imaging discovery method is no longer included in this data frame."""

ax2 = sns.barplot(y='discoverymethod', x='pl_orbper', data=df2)
ax2.set(xlabel='Orbital Period', ylabel='', title='Discovery Method and Orbital Period (days)')
plt.show()

"""Here, we can see the different discovery methods and the average orbital periods for each method. 
The transit method is a phenomenon when a celestial body passes directly between a larger body and the observer. The transit method has a much smaller orbital period on average, which makes sense because it is easier for astronomers to take more than one measurement of the star using the transit method if there is a shorter orbital period. Also, astronomers would be better able to measure the exoplanet if it is closer to the star.

## How does the transit discovery method compare to other discovery methods in terms of the size of discovered planets?
"""

# List of radii
pl_rade_min = min(exoplanets["pl_rade"])
pl_rade_max = max(exoplanets["pl_rade"])
print(pl_rade_min, " - ", pl_rade_max)

ax1 = sns.barplot(y='discoverymethod', x='pl_rade', data=exoplanets)
ax1.set(xlabel='Earth Radius', ylabel='', title='Discovery Method by Earth Radius')
plt.show()

"""The average radius for exoplanets discovered using the transit method is approximately 4.8 times larger than the Earth's radius. 
This is small compared to other discovery methods. The largest average is imaging, which uses infrared wavelengths to capture iamges of exoplanets directly.

## Which class of stars have the most planets around them? (star types O, B, A, F, G, K, M, in order of decreasing temperatures)

We will convert the temperature variable into categorical ones by putting them into star types based on the range.
"""

df3 = pd.cut(exoplanets.st_teff,bins=[0,3500,5000,6000,7500,10000,30000,60000],labels=["M","K","G","F","A","B","O"])

print(df3)

df3 = df3.to_frame()

ax1 = sns.countplot(x='st_teff', data=df3)
ax1.set(xlabel='Class of Star by Stellar Temperature', ylabel='Count', title='Star Type with Planet Numbers')
plt.show()

"""Star types used: M (0-3500 Kelvin), K (3500-5000 Kelvin), G (5000-6000 Kelvin), F (6000-7500 Kelvin), A (7500-10000 Kelvin), B (10000-30000 Kelvin), O (30000-60000 Kelvin)

The cooler star types start from M, and the hottest star type is type O. 

Our sun is in the class G star. 

We can see that star types F, G, and K are the most common. There are not as many for star types A, B, and O, which may be because the methods used cannot detect exoplanets with stars of such a high temperature. 

Transit methods are the most common with a smaller orbital period -- may be more difficult to use the transit method for a hotter star, since the exoplanets may need a larger orbital period so they won't burn up.

## Consider the planets that meet the parameters for the Habitable Zone (equilibrium temperature (planet surface) of 180-310 degrees K, and insolation flux factor of .25-2.2 (amount of radiation the planet receives from the star it is orbiting)

#16 and #17 (pl_insol and pl_eqt)
"""

exoplanets.pl_insol

exoplanets.pl_eqt

df5=exoplanets[["pl_insol", "pl_eqt"]]
df5.head()

df5=df5.dropna()
df5.head()

df5.info()

#copying df5 to filter and slowly start filtering out non-habitable  
df5_filter = df5
#df5_filter = df5[df5['pl_insol'] >= .25 & <= 2.2] 

insol_filter = (df5['pl_insol'] >= .25) & (df5['pl_insol'] <= 2.2)

#df5_filter = df5[df5['pl_insol'] <= 2.2
df5_filter = df5.loc[insol_filter]

min = df5_filter["pl_insol"].min()
max = df5_filter["pl_insol"].max()

print("min:" + str(min))
print("max:" + str(max))

eqt_filter = (df5['pl_eqt'] >= 180) & (df5['pl_eqt'] <= 310)

df5_filter = df5.loc[eqt_filter]

min = df5_filter["pl_eqt"].min()
max = df5_filter["pl_eqt"].max()

print("min:" + str(min))
print("max:" + str(max))

count_habplan=df5_filter.dropna().count()

print(count_habplan)